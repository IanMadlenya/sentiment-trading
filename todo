need to test the republisher - run in current state - should see a position change
need to get the position stuff etc on to the presentation screen
 - display current position values
 - perhaps display last event

make the historic screen kick off the historic data
can we add some global variables to control the level of logging

can we write something to find the best period to run for?
 - actually just need to run for a series of different big steps and look at the results


get it running in the cloud
work out how to get the data out of mongo and into the repo

work out how the historic data oanda interface works
work out how to do the over time bit
work out how to do historic rates and to "replay" streaming at a specific pace from a specific time

message checking - make sure we're storing something sensible
some sort of time service
display position/make trade service (trade confidence * 1000 gbp)


display rates v. position over time (with events?)

port over to rbs hackathon user
dockerfy it



use cases:

 - normal streaming case with rest for harvesting
 - replay mode - (from here to here)



mongod --dbpath ./db/



done:

check in to repo
extract api keys and check in config
get mongo up and running and get something into it
rest i/f to store messages into
make the css in the page a bit nicer - switch away from cover to something else

plan
----

real time:

  events get put on a bus (by the sentiment doodah) - poss from rest
  events get pulled off the buss and recorded in the db
  we pick up the events in the trade module and trade <- don't actually need to trade
  position server keeps track?  or trade module does

play back

  need a way of getting market onto bus - maybe oanda historic stream or something - might need to pre-record
  time service to broadcast time
  historic event player gets the events out of the db for the time period and publishes to the bus
  historic stream pumps events on for the broadcast time
  trade module uses both to work out position
